# This configuration creates separate database-based configuration for /one and /two

embed-server

module add --name=oracle.jdbc --resources=C:\Users\guttorm.vik\.m2\repository\com\oracle\database\jdbc\ojdbc11\21.5.0.0\ojdbc11-21.5.0.0.jar --dependencies=javax.api,javax.transaction.api
module add --name=net.sf.log4jdbc --resources=C:\Users\guttorm.vik\.m2\repository\org\bgee\log4jdbc-log4j2\log4jdbc-log4j2-jdbc4.1\1.16\log4jdbc-log4j2-jdbc4.1-1.16.jar --dependencies=javax.api,javax.transaction.api,org.slf4j,oracle.jdbc

# Standard db setup

#data-source add --name=ptsmc --jndi-name=java:jboss/ptsmc --driver-name=OracleJDBCDriver --connection-url=jdbc:oracle:thin:@//dw429.dev.dawinci.cloud:1521/orcl --user-name=dwpuser --password=dwpass
data-source add --name=ptsmc --jndi-name=java:jboss/ptsmc --driver-name=log4jdbc --connection-url=jdbc:log4jdbc:oracle:thin:@//dw429.dev.dawinci.cloud:1521/orcl --user-name=dwpuser --password=dwpass

/system-property=log4jdbc.spylogdelegator.name:add(value=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator)
/system-property=log4jdbc.dump.sql.maxlinelength:add(value=0)
/system-property=log4jdbc.dump.sql.addsemicolon:add(value=true)
/system-property=log4jdbc.drivers:add(value=oracle.jdbc.OracleDriver)

/subsystem=datasources/jdbc-driver=OracleJDBCDriver:add(driver-name=OracleJDBCDriver,driver-module-name=oracle.jdbc)
/subsystem=datasources/jdbc-driver=log4jdbc:add(driver-name=log4jdbc,driver-module-name=net.sf.log4jdbc)
/subsystem=logging/logger=jboss.jdbc.spy:add(level=TRACE)

# Getting elytron to work -----------------

# ptsmc

/subsystem=elytron/jdbc-realm=ptsmcDbRealm:add(principal-query=[{sql="select rawtohex(bu.user_id || '-') as salt, bu.password_login, 'WEB' as groups from t_basis_user bu where bu.user_id = ? and bu.password_expiry_date > trunc(sysdate)-1",data-source=ptsmc,salted-simple-digest-mapper={algorithm=salt-password-digest-sha-256,salt-index=1,password-index=2,salt-encoding=hex,hash-encoding=hex},attribute-mapping=[{index=3,to=groups}]}])

/subsystem=elytron/security-domain=ptsmcSD:add(realms=[{realm=ptsmcDbRealm,role-decoder=groups-to-roles}],default-realm=ptsmcDbRealm,permission-mapper=default-permission-mapper)
/subsystem=elytron/http-authentication-factory=ptsmc-http-auth:add(http-server-mechanism-factory=global,security-domain=ptsmcSD,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=ptsmcSD}]}])
/subsystem=undertow/application-security-domain=ptsmcApplicationDomain:add(http-authentication-factory=ptsmc-http-auth)

# traveller

/subsystem=elytron/jdbc-realm=travellerDbRealm:add(principal-query=[{sql="select rawtohex('Traveller-' || wu.dw_id || '-') as salt, wu.password, 'TRAVELLER' as role from t_wfe_user wu join t_person_address pa on pa.dw_id = wu.dw_id where ? in (trim(upper(wu.user_id)), trim(upper(pa.email)), trim(pa.mobile_telephone))",data-source=ptsmc,salted-simple-digest-mapper={algorithm=salt-password-digest-sha-256,salt-index=1,password-index=2,salt-encoding=hex,hash-encoding=hex},attribute-mapping=[{index=3,to=groups}]}])

/subsystem=elytron/security-domain=travellerSD:add(realms=[{realm=travellerDbRealm,role-decoder=groups-to-roles}],default-realm=travellerDbRealm,permission-mapper=default-permission-mapper)
/subsystem=elytron/http-authentication-factory=traveller-http-auth:add(http-server-mechanism-factory=global,security-domain=travellerSD,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=travellerSD}]}])
/subsystem=undertow/application-security-domain=travellerApplicationDomain:add(http-authentication-factory=traveller-http-auth)

# Automatically uppercase userid before doing db lookup

/subsystem=elytron/case-principal-transformer=uppercaseTransformer:add(upper-case=true)

/subsystem=elytron/security-domain=ptsmcSD:write-attribute(name=pre-realm-principal-transformer, value=uppercaseTransformer)
/subsystem=elytron/security-domain=travellerSD:write-attribute(name=pre-realm-principal-transformer, value=uppercaseTransformer)


# Standalone.xml

    <system-properties>
        <property name="log4jdbc.spylogdelegator.name" value="net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator"/>
        <property name="log4jdbc.dump.sql.maxlinelength" value="0"/>
        <property name="log4jdbc.dump.sql.addsemicolon" value="true"/>
        <property name="log4jdbc.drivers" value="oracle.jdbc.OracleDriver"/>
    </system-properties>
    ...
    <profile>
        ...
        <subsystem xmlns="urn:jboss:domain:datasources:7.0">
            <datasources>
                <datasource jndi-name="java:jboss/ptsmc" pool-name="ptsmc">
                    <connection-url>jdbc:log4jdbc:oracle:thin:@//dw429.dev.dawinci.cloud:1521/orcl</connection-url>
                    <driver>log4jdbc</driver>
                    <security>
                        <user-name>dwpuser</user-name>
                        <password>dwpass</password>
                    </security>
                </datasource>
                <drivers>
                    ...
                    <driver name="OracleJDBCDriver" module="oracle.jdbc"/>
                    <driver name="log4jdbc" module="net.sf.log4jdbc"/>
                </drivers>
            </datasources>
        </subsystem>
        ...
        <subsystem xmlns="urn:wildfly:elytron:16.0" final-providers="combined-providers" disallowed-providers="OracleUcrypto">
            <security-domains>
                ...
                <security-domain name="ptsmcSD" default-realm="ptsmcDbRealm" permission-mapper="default-permission-mapper" pre-realm-principal-transformer="uppercaseTransformer">
                    <realm name="ptsmcDbRealm" role-decoder="groups-to-roles"/>
                </security-domain>
                <security-domain name="travellerSD" default-realm="travellerDbRealm" permission-mapper="default-permission-mapper" pre-realm-principal-transformer="uppercaseTransformer">
                    <realm name="travellerDbRealm" role-decoder="groups-to-roles"/>
                </security-domain>
            </security-domains>
            <security-realms>
                ...
                <jdbc-realm name="ptsmcDbRealm">
                    <principal-query sql="select rawtohex(bu.user_id || '-') as salt, bu.password_login, 'WEB' as groups from t_basis_user bu where bu.user_id = ? and bu.password_expiry_date &gt; trunc(sysdate)-1" data-source="ptsmc">
                        <attribute-mapping>
                            <attribute to="groups" index="3"/>
                        </attribute-mapping>
                        <salted-simple-digest-mapper algorithm="salt-password-digest-sha-256" password-index="2" salt-index="1" hash-encoding="hex" salt-encoding="hex"/>
                    </principal-query>
                </jdbc-realm>
                <jdbc-realm name="travellerDbRealm">
                    <principal-query sql="select rawtohex('Traveller-' || wu.dw_id || '-') as salt, wu.password, 'TRAVELLER' as role from t_wfe_user wu join t_person_address pa on pa.dw_id = wu.dw_id where ? in (trim(upper(wu.user_id)), trim(upper(pa.email)), trim(pa.mobile_telephone))" data-source="ptsmc">
                        <attribute-mapping>
                            <attribute to="groups" index="3"/>
                        </attribute-mapping>
                        <salted-simple-digest-mapper algorithm="salt-password-digest-sha-256" password-index="2" salt-index="1" hash-encoding="hex" salt-encoding="hex"/>
                    </principal-query>
                </jdbc-realm>
                ...
            </security-realms>
            <mappers>
                ...
                <case-principal-transformer name="uppercaseTransformer" upper-case="true"/>
            </mappers>
            ...
            <http>
                ...
                <http-authentication-factory name="ptsmc-http-auth" security-domain="ptsmcSD" http-server-mechanism-factory="global">
                    <mechanism-configuration>
                        <mechanism mechanism-name="BASIC">
                            <mechanism-realm realm-name="ptsmcSD"/>
                        </mechanism>
                    </mechanism-configuration>
                </http-authentication-factory>
                <http-authentication-factory name="traveller-http-auth" security-domain="travellerSD" http-server-mechanism-factory="global">
                    <mechanism-configuration>
                        <mechanism mechanism-name="BASIC">
                            <mechanism-realm realm-name="travellerSD"/>
                        </mechanism>
                    </mechanism-configuration>
                </http-authentication-factory>
                ...
            </http>
        </subsystem>
        ...
        <subsystem xmlns="urn:jboss:domain:undertow:13.0" default-server="default-server" default-virtual-host="default-host" default-servlet-container="default" default-security-domain="other" statistics-enabled="${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}}">
            ...
            <application-security-domains>
                ..
                <application-security-domain name="ptsmcApplicationDomain" http-authentication-factory="ptsmc-http-auth"/>
                <application-security-domain name="travellerApplicationDomain" http-authentication-factory="traveller-http-auth"/>
            </application-security-domains>
        </subsystem>










# debugging --------------


# turn on elytron logging
/subsystem=logging/logger=org.wildfly.security:add(level=DEBUG)
/subsystem=logging/logger=org.wildfly.elytron:add(level=ALL)


# Hva kan jeg sette p√• <realm> ?
/subsystem=elytron/security-domain=ptsmcSD2:add(realms=[{realm=ptsmcDbRealm,
    principal-transformer
    role-decoder
    role-mapper


/subsystem=elytron/security-domain=ptsmcSD2:add(
    !
    outflow-security-domains
    principal-decoder
    role-mapper
    default-realm
    permission-mapper
    realm-mapper
    security-event-listener
    evidence-decoder
    post-realm-principal-transformer
    realms
    trusted-security-domains
    outflow-anonymous
    pre-realm-principal-transformer
    role-decoder



/subsystem=elytron/
    custom-realm
    *
